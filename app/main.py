from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi import Request
from fastapi.responses import JSONResponse
import app.database.db as db
from app.ai import generate_response
from app.database.models import Message

app = FastAPI()


def extract_message_info(body: dict) -> dict:
    entry = body["entry"][0]["changes"][0]["value"]
    return {
        "message": entry["messages"][0],
        "wa_id": entry["contacts"][0]["wa_id"],
        "timestamp": int(entry["messages"][0].get("timestamp")),
        "name": entry["contacts"][0]["profile"]["name"],
    }


def extract_message(message: dict) -> str:
    message_type = message.get("type")
    if message_type == "text":
        return message["text"]["body"]
    elif message_type == "interactive":
        interactive_type = message["interactive"]["type"]
        if interactive_type == "button_reply":
            return message["interactive"]["button_reply"]["title"]
        elif interactive_type == "list_reply":
            return message["interactive"]["list_reply"]["title"]

    return "warning: user sent an unsupported message type"


async def handle_request(request: Request) -> JSONResponse:
    """
    Handles HTTP requests to the 'devhooks' endpoint
    """
    body = request.json()

    # Extract message information and create/get user
    message_info = extract_message_info(body)

    message = extract_message(message_info.get("message", None))

    user = db.get_or_create_user(
        wa_id=message_info["wa_id"], name=message_info.get("name")
    )

    # Create message record
    user_message = db.create_new_message(
        Message(user_id=user.id, role="user", content=message)
    )

    llm_responses = generate_response(user=user, message=user_message)
    if llm_responses:
        # Update the database with the responses
        db.create_new_messages(llm_responses)

        # Send the last message back to the user
        whatsapp_client.send_message(user.wa_id, llm_responses[-1].content)
    else:
        err_message = "No response generated by LLM"
        whatsapp_client.send_message(user.wa_id, err_message)

    return JSONResponse(
        content={"status": "ok"},
        status_code=200,
    )


@app.post("/devhooks")
def devhooks_post(request: Request) -> JSONResponse:
    return handle_request(request)
