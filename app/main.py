from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi import Request
from fastapi.responses import JSONResponse
import app.database.db as db
from app.ai import generate_response
from app.database.models import (
    ClassInfo,
    Message,
    MessageRole,
    OnboardingState,
    Role,
    User,
    UserState,
)


app = FastAPI()


def extract_message_info(body: dict) -> dict:
    entry = body["entry"][0]["changes"][0]["value"]
    return {
        "message": entry["messages"][0],
        "wa_id": entry["contacts"][0]["wa_id"],
        "timestamp": int(entry["messages"][0].get("timestamp")),
        "name": entry["contacts"][0]["profile"]["name"],
    }


def extract_message(message: dict) -> str:
    message_type = message.get("type")
    if message_type == "text":
        return message["text"]["body"]
    elif message_type == "interactive":
        interactive_type = message["interactive"]["type"]
        if interactive_type == "button_reply":
            return message["interactive"]["button_reply"]["title"]
        elif interactive_type == "list_reply":
            return message["interactive"]["list_reply"]["title"]

    return "warning: user sent an unsupported message type"


def handle_new_dummy(user: User):
    # Update the user object with dummy data
    user.state = UserState.active
    user.onboarding_state = OnboardingState.completed
    user.role = Role.teacher
    user.class_info = ClassInfo(classes={"geography": ["os2"]}).model_dump()

    # Read the class IDs from the class info
    class_ids = db.get_class_ids_from_class_info(user.class_info)

    assert class_ids is not None

    # Update user and create teachers_classes entries
    user = db.update_user(user)
    db.assign_teacher_to_classes(user, class_ids)

    # Check that user.id is not None before creating message
    if user.id is None:
        print("Error: User ID is None after update")
        return

    # Send a welcome message to the user
    db.create_new_message(
        Message(
            user_id=user.id,
            role=MessageRole.assistant,
            content="Hello, you have been automatically assigned to Geography Form 2, you can start chatting with me now!",
        )
    )


async def handle_request(request: Request) -> JSONResponse:
    """
    Handles HTTP requests to the 'devhooks' endpoint
    """
    body = await request.json()
    message_info = extract_message_info(body)

    message = extract_message(message_info.get("message", None))

    # wa_id = "+5511999999999"
    # print(f"New message from {message_info['wa_id']}: {message}")

    user = db.get_or_create_user(
        wa_id=message_info["wa_id"], name=message_info.get("name")
    )

    if user.state == UserState.new:
        handle_new_dummy(user)
        # Reload user with all relationships after database changes
        user = db.get_or_create_user(
            wa_id=message_info["wa_id"], name=message_info.get("name")
        )

    if user.id is None:
        return JSONResponse(
            content={"status": "error", "message": "User ID is missing"},
            status_code=500,
        )

    # Create message record
    user_message = db.create_new_message(
        Message(user_id=user.id, role=MessageRole.user, content=message)
    )

    llm_response = await generate_response(user=user, message=user_message)
    if not llm_response:
        print("No response generated by LLM")

    return JSONResponse(
        content={"status": "ok"},
        status_code=200,
    )


@app.post("/devhooks")
async def devhooks_post(request: Request) -> JSONResponse:
    return await handle_request(request)
